# Generated by Django 5.2.4 on 2025-09-21 10:00

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="Worker's biography/description")),
                ('years_experience', models.PositiveIntegerField(default=0, help_text='Years of professional experience')),
                ('languages', models.JSONField(default=list, help_text="Languages spoken, e.g. ['pt', 'en', 'fr']")),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='pending', help_text='Worker approval status', max_length=20)),
                ('is_verified', models.BooleanField(default=False, help_text='KYC verification completed')),
                ('background_check', models.BooleanField(default=False, help_text='Background check completed')),
                ('id_document', models.FileField(blank=True, help_text='Identity document', null=True, upload_to='worker_docs/id/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('proof_of_address', models.FileField(blank=True, help_text='Proof of address document', null=True, upload_to='worker_docs/address/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('rating_average', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Average rating (0-5)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0, help_text='Total number of ratings')),
                ('jobs_completed', models.PositiveIntegerField(default=0, help_text='Total completed jobs')),
                ('jobs_cancelled', models.PositiveIntegerField(default=0, help_text='Total cancelled jobs')),
                ('completion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Job completion percentage', max_digits=5)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total earnings in AOA', max_digits=12)),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Current balance in AOA', max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Currently available for work')),
                ('accepts_emergency', models.BooleanField(default=False, help_text='Accepts emergency/urgent requests')),
                ('accepts_same_day', models.BooleanField(default=True, help_text='Accepts same-day bookings')),
                ('service_areas', models.JSONField(default=list, help_text='List of service area codes/names')),
                ('max_travel_distance', models.PositiveIntegerField(default=25, help_text='Maximum travel distance in km')),
                ('working_hours', models.JSONField(blank=True, default=dict, help_text="Weekly schedule, e.g. {'monday': {'start': '08:00', 'end': '18:00', 'available': true}}")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(help_text='User account for this worker', on_delete=django.db.models.deletion.CASCADE, related_name='worker_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Worker',
                'verbose_name_plural': 'Workers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyTypology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('T1', 'T1 - 1 Bedroom'), ('T2', 'T2 - 2 Bedrooms'), ('T3', 'T3 - 3 Bedrooms'), ('T4+', 'T4+ - 4+ Bedrooms')], help_text='Property typology classification', max_length=5, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of this property type')),
                ('typical_sqm', models.PositiveIntegerField(blank=True, help_text='Typical size in square meters', null=True)),
            ],
            options={
                'verbose_name': 'Property Typology',
                'verbose_name_plural': 'Property Typologies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ACTechnicianWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('hvac_certification', models.CharField(blank=True, help_text='HVAC certification number', max_length=100)),
                ('refrigerant_license', models.CharField(blank=True, help_text='Refrigerant handling license', max_length=100)),
                ('brands_serviced', models.JSONField(default=list, help_text="AC brands serviced, e.g. ['LG', 'Samsung', 'Daikin']")),
                ('service_types', models.JSONField(default=list, help_text="Service types offered, e.g. ['installation', 'repair', 'maintenance', 'cleaning']")),
                ('unit_pricing', models.JSONField(default=dict, help_text='Pricing structure for multiple units')),
                ('has_diagnostic_tools', models.BooleanField(default=True, help_text='Has professional diagnostic equipment')),
            ],
            options={
                'verbose_name': 'AC Technician',
                'verbose_name_plural': 'AC Technicians',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='CleaningWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('specializations', models.JSONField(default=list, help_text="Cleaning specializations, e.g. ['deep_clean', 'eco_friendly', 'post_construction']")),
                ('cleaning_types', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('industrial', 'Industrial'), ('specialized', 'Specialized')], default='residential', help_text='Primary cleaning type', max_length=20)),
                ('has_own_supplies', models.BooleanField(default=False, help_text='Brings own cleaning supplies')),
                ('has_own_equipment', models.BooleanField(default=False, help_text='Has professional cleaning equipment')),
                ('certifications', models.JSONField(blank=True, default=list, help_text='Cleaning certifications')),
            ],
            options={
                'verbose_name': 'Cleaning Worker',
                'verbose_name_plural': 'Cleaning Workers',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='DogTrainerWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('certifications', models.JSONField(default=list, help_text="Training certifications, e.g. ['CCPDT', 'IAABC']")),
                ('training_methods', models.CharField(choices=[('positive', 'Positive Reinforcement'), ('balanced', 'Balanced Training'), ('clicker', 'Clicker Training'), ('behavior', 'Behavioral Modification')], default='positive', help_text='Primary training method', max_length=20)),
                ('specializations', models.JSONField(default=list, help_text="Specializations, e.g. ['puppy', 'aggression', 'obedience', 'service_dog']")),
                ('breed_experience', models.JSONField(default=list, help_text='Breeds with specific experience')),
                ('max_dogs_per_session', models.PositiveIntegerField(default=1, help_text='Maximum dogs per training session')),
                ('offers_group_classes', models.BooleanField(default=False, help_text='Offers group training classes')),
                ('package_offerings', models.JSONField(default=dict, help_text='Available training packages')),
            ],
            options={
                'verbose_name': 'Dog Trainer',
                'verbose_name_plural': 'Dog Trainers',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='ElectricianWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('license_number', models.CharField(blank=True, help_text='Electrical license number', max_length=100)),
                ('license_expiry', models.DateField(blank=True, help_text='License expiry date', null=True)),
                ('voltage_certifications', models.JSONField(default=list, help_text="Voltage levels certified for, e.g. ['low', 'medium', 'high']")),
                ('specializations', models.JSONField(default=list, help_text="Specializations, e.g. ['residential', 'commercial', 'industrial', 'solar']")),
                ('minimum_hours', models.PositiveIntegerField(default=2, help_text='Minimum billable hours')),
                ('typology_rates', models.JSONField(default=dict, help_text="Hourly rates by property type, e.g. {'T1': 8000, 'T2': 9000, 'T3': 10000, 'T4+': 12000}")),
                ('emergency_surcharge', models.DecimalField(decimal_places=2, default=Decimal('50.00'), help_text='Emergency service surcharge percentage', max_digits=5)),
            ],
            options={
                'verbose_name': 'Electrician',
                'verbose_name_plural': 'Electricians',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='GardenerWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('services_offered', models.JSONField(default=list, help_text="Services, e.g. ['lawn_care', 'tree_trimming', 'landscaping', 'irrigation']")),
                ('equipment_owned', models.JSONField(default=list, help_text="Equipment owned, e.g. ['mower', 'trimmer', 'chainsaw']")),
                ('plant_knowledge', models.JSONField(default=list, help_text="Plant expertise, e.g. ['tropical', 'succulents', 'vegetables']")),
                ('pesticide_license', models.CharField(blank=True, help_text='Pesticide application license', max_length=100)),
                ('landscape_design', models.BooleanField(default=False, help_text='Offers landscape design services')),
            ],
            options={
                'verbose_name': 'Gardener',
                'verbose_name_plural': 'Gardeners',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='HandymanWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('skills', models.JSONField(default=list, help_text="Skills list, e.g. ['carpentry', 'painting', 'plumbing_basic', 'furniture_assembly']")),
                ('tools_owned', models.JSONField(default=list, help_text='Professional tools owned')),
                ('can_source_materials', models.BooleanField(default=True, help_text='Can source materials for projects')),
                ('project_portfolio', models.URLField(blank=True, help_text='Link to portfolio/gallery')),
                ('hourly_rate', models.PositiveIntegerField(default=7000, help_text='Standard hourly rate in AOA')),
            ],
            options={
                'verbose_name': 'Handyman',
                'verbose_name_plural': 'Handymen',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='PestControlWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('pest_control_license', models.CharField(blank=True, help_text='Pest control license number', max_length=100)),
                ('chemical_certification', models.CharField(blank=True, help_text='Chemical handling certification', max_length=100)),
                ('service_types', models.CharField(choices=[('general', 'General Pest Control'), ('deratization', 'Deratization'), ('both', 'Both Services')], default='both', help_text='Types of pest control offered', max_length=20)),
                ('chemicals_used', models.JSONField(default=list, help_text='List of approved chemicals used')),
                ('eco_friendly_options', models.BooleanField(default=False, help_text='Offers eco-friendly pest control')),
                ('typology_pricing', models.JSONField(default=dict, help_text='Fixed pricing by property type for each service')),
            ],
            options={
                'verbose_name': 'Pest Control Worker',
                'verbose_name_plural': 'Pest Control Workers',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='PlacementWorker',
            fields=[
                ('worker_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='workers.worker')),
                ('placement_type', models.CharField(choices=[('live_in', 'Live-in'), ('live_out', 'Live-out'), ('both', 'Both')], default='both', help_text='Type of placement offered', max_length=20)),
                ('domestic_skills', models.JSONField(default=list, help_text="Skills, e.g. ['cooking', 'childcare', 'elderly_care', 'housekeeping']")),
                ('cooking_specialties', models.JSONField(blank=True, default=list, help_text='Cooking specialties/cuisines')),
                ('childcare_experience', models.BooleanField(default=False, help_text='Has childcare experience')),
                ('first_aid_certified', models.BooleanField(default=False, help_text='First aid certification')),
                ('drivers_license', models.BooleanField(default=False, help_text="Has driver's license")),
                ('minimum_contract_months', models.PositiveIntegerField(default=6, help_text='Minimum contract duration in months')),
                ('expected_salary', models.PositiveIntegerField(blank=True, help_text='Expected monthly salary in AOA', null=True)),
                ('placement_fee', models.PositiveIntegerField(default=75000, help_text='One-time placement fee in AOA')),
            ],
            options={
                'verbose_name': 'Placement Worker',
                'verbose_name_plural': 'Placement Workers',
            },
            bases=('workers.worker',),
        ),
        migrations.CreateModel(
            name='ServicePackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package_name', models.CharField(help_text="Name of the package, e.g. '5-Session Pack'", max_length=100)),
                ('package_type', models.CharField(help_text="Type identifier, e.g. 'dog_training_5'", max_length=50)),
                ('total_credits', models.PositiveIntegerField(help_text='Total sessions/credits in package')),
                ('used_credits', models.PositiveIntegerField(default=0, help_text='Credits already used')),
                ('amount_paid', models.DecimalField(decimal_places=2, help_text='Total amount paid for package', max_digits=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('depleted', 'Depleted'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='active', help_text='Package status', max_length=20)),
                ('purchase_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Package expiration date', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the package')),
                ('customer', models.ForeignKey(help_text='Customer who purchased the package', on_delete=django.db.models.deletion.CASCADE, related_name='service_packages', to=settings.AUTH_USER_MODEL)),
                ('worker', models.ForeignKey(blank=True, help_text='Worker providing the service', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='packages_sold', to='workers.worker')),
            ],
            options={
                'verbose_name': 'Service Package',
                'verbose_name_plural': 'Service Packages',
                'ordering': ['-purchase_date'],
            },
        ),
    ]
