# Generated by Django 5.2.4 on 2025-09-22 22:08

from django.db import migrations


def migrate_provider_data(apps, schema_editor):
    """Migrate data from ProviderProfile to appropriate Worker models."""
    User = apps.get_model('accounts', 'User')
    ProviderProfile = apps.get_model('accounts', 'ProviderProfile')
    CleaningWorker = apps.get_model('workers', 'CleaningWorker')
    HandymanWorker = apps.get_model('workers', 'HandymanWorker')
    
    for provider in ProviderProfile.objects.all():
        # Determine worker type based on skills
        skills = provider.skills or []
        
        # Map provider skills to worker types
        if any(skill in ['cleaning', 'housekeeping', 'deep_clean'] for skill in skills):
            worker_class = CleaningWorker
            specializations = [skill for skill in skills if skill in [
                'deep_clean', 'eco_friendly', 'post_construction', 'window_cleaning'
            ]]
        else:
            # Default to HandymanWorker for general providers
            worker_class = HandymanWorker
            specializations = skills
        
        # Create worker instance
        worker = worker_class.objects.create(
            user=provider.user,
            bio=provider.bio or '',
            years_experience=0,  # Default, can be updated manually
            languages=['pt'],  # Default to Portuguese
            status='approved' if provider.is_approved else 'pending',
            is_verified=provider.is_approved,
            rating_average=provider.rating_average,
            rating_count=provider.rating_count,
            jobs_completed=provider.jobs_completed,
            completion_rate=provider.completion_rate,
            total_earnings=provider.total_earnings,
            current_balance=0,  # Reset balance for new system
            is_available=provider.is_available,
            accepts_same_day=provider.accepts_same_day,
            service_areas=[provider.service_area] if provider.service_area else [],
            max_travel_distance=provider.max_travel_distance,
            working_hours=provider.working_hours or {}
        )
        
        # Set specializations for specific worker types
        if hasattr(worker, 'specializations'):
            worker.specializations = specializations
            worker.save()


def reverse_migrate_provider_data(apps, schema_editor):
    """Reverse migration - remove all Worker instances."""
    Worker = apps.get_model('workers', 'Worker')
    Worker.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('workers', '0001_initial'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            migrate_provider_data,
            reverse_migrate_provider_data
        ),
    ]
