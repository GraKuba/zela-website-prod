name: Deploy to Production (Azure)

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment
    inputs:
      skip_tests:
        description: "Skip tests (emergency deployment)"
        required: false
        default: "false"
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  AZURE_WEBAPP_NAME: "zela-production" # Replace with your Azure Web App name

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_zela
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd Zela
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd Zela/theme/static_src
          npm install

      - name: Set up environment variables
        run: |
          cd Zela
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DEBUG=False" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_zela" >> .env
          echo "DJANGO_SETTINGS_MODULE=Zela.settings.production" >> .env

      - name: Build Tailwind CSS
        run: |
          cd Zela
          python manage.py tailwind build

      - name: Collect static files
        run: |
          cd Zela
          python manage.py collectstatic --noinput

      - name: Run migrations
        run: |
          cd Zela
          python manage.py migrate

      - name: Run comprehensive tests
        run: |
          cd Zela
          python manage.py test --verbosity=2

      - name: Run production checks
        run: |
          cd Zela
          python manage.py check --deploy
          python manage.py check --tag security

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || inputs.skip_tests)
    environment: production # GitHub environment protection

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies and build
        run: |
          cd Zela
          python -m pip install --upgrade pip
          pip install -r requirements.txt

          # Install Node.js dependencies and build Tailwind
          cd theme/static_src
          npm install
          cd ../..

          # Build for production
          python manage.py tailwind build
          python manage.py collectstatic --noinput

      - name: Create deployment package
        run: |
          cd Zela
          # Create a deployment-ready package
          zip -r ../zela-production-$(date +%Y%m%d-%H%M%S).zip . \
            -x "*.git*" "*.env*" "db.sqlite3" "media/*" "__pycache__/*" "*.pyc"

      # Azure deployment steps
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: "./zela-production-*.zip"
          startup-command: "cd Zela && ./build-production.sh && gunicorn --bind 0.0.0.0:8000 Zela.wsgi:application"

      # Alternative: Deploy using Docker to Azure Container Instances
      # - name: Build and push Docker image
      #   run: |
      #     docker build -t zela-production:${{ github.sha }} -f Zela/Dockerfile-production .
      #     echo ${{ secrets.AZURE_REGISTRY_PASSWORD }} | docker login ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }} -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin
      #     docker tag zela-production:${{ github.sha }} ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/zela-production:${{ github.sha }}
      #     docker push ${{ secrets.AZURE_REGISTRY_LOGIN_SERVER }}/zela-production:${{ github.sha }}

      - name: Run post-deployment health check
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 60

          # Health check
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health/"
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Production deployment successful!"
            echo "🔗 Production URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          else
            echo "❌ Health check failed - deployment may have issues"
            exit 1
          fi

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Emergency rollback notification
        run: |
          echo "🚨 Production deployment failed!"
          echo "🔄 Automatic rollback procedures should be initiated"
          echo "📞 Alert the development team immediately"

    # Add your rollback steps here, such as:
    # - Revert to previous Azure deployment slot
    # - Restore database backup if needed
    # - Update DNS/load balancer if necessary
